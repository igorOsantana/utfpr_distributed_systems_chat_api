generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String   @db.VarChar(255)
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sentFriendRequests     Friendship[]   @relation("sender")
  receivedFriendRequests Friendship[]   @relation("recipient")
  messages               Message[]
  chats                  UsersOnChats[]

  @@map("users")
}

enum FriendshipStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Friendship {
  senderId    String
  recipientId String
  status      FriendshipStatus @default(PENDING)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  sender    User @relation("sender", fields: [senderId], references: [id])
  recipient User @relation("recipient", fields: [recipientId], references: [id])

  @@id([senderId, recipientId])
}

model Chat {
  id        String   @id @default(uuid())
  lastMsg   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participants UsersOnChats[]
  messages     Message[]

  @@map("chats")
}

model UsersOnChats {
  chat   Chat    @relation(fields: [chatId], references: [id])
  chatId String
  user   User    @relation(fields: [userId], references: [id])
  userId String
  read   Boolean @default(false)

  @@id([chatId, userId])
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sender   User   @relation(fields: [senderId], references: [id])
  senderId String

  chat   Chat   @relation(fields: [chatId], references: [id])
  chatId String

  @@map("messages")
}
